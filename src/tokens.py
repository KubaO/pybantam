__all__ = ['TokenType', 'Token']

from enum import Enum
from typing import NamedTuple


class TokenType(Enum):
    LEFT_PAREN = '('
    RIGHT_PAREN = ')'
    COMMA = ','
    ASSIGN = '='
    PLUS = '+'
    MINUS = '-'
    ASTERISK = '*'
    SLASH = '/'
    CARET = '^'
    TILDE = '~'
    BANG = '!'
    QUESTION = '?'
    COLON = ':'
    NAME = (r'\w+',)
    EOF = (r'$',)

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"

    @property
    def is_punctuator(self) -> bool:
        """
        Returns whether the token is a punctuator, i.e. a token that can split
        an identifier like '+'.
        """
        return isinstance(self.value, str)


class Token(NamedTuple):
    """A simple token class. These are generated by Lexer and consumed by Parser."""

    type: TokenType
    text: str

    def __str__(self):
        return self.text
