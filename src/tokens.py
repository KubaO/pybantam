__all__ = ['TokenType', 'Token', 'TOKEN_PATTERNS']

import re
from enum import Enum
from typing import NamedTuple


class TokenType(Enum):
    LEFT_PAREN = '('
    RIGHT_PAREN = ')'
    COMMA = ','
    ASSIGN = '='
    PLUS = '+'
    MINUS = '-'
    ASTERISK = '*'
    SLASH = '/'
    CARET = '^'
    TILDE = '~'
    BANG = '!'
    QUESTION = '?'
    COLON = ':'
    NAME = (r'\w+',)
    EOF = (r'$',)

    def __repr__(self):
        return f"{self.__class__.__name__}.{self.name}"

    @property
    def re(self) -> str:
        """Gets the regular expression that matches this token"""
        if isinstance(self.value, str):
            return re.escape(self.value)
        else:
            return self.value[0]


class Token(NamedTuple):
    """A simple token class. These are generated by Lexer and consumed by Parser."""

    type: TokenType
    text: str

    def __str__(self):
        return self.text


TOKEN_PATTERNS = {tt: tt.re for tt in TokenType}
